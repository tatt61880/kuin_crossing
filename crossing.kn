{{{
	crossing.kn for Kuin
		回答者: Tatt (@tatt61880)
	クロッシング問題:
		https://codeiq.jp/q/432
		出題者: 結城浩さん (@hyuki)
		http://www.hyuki.com/codeiq/
}}}
const inputFilePath: []char :: "./crossing.txt"
const outputFilePath: []char :: "./answer.txt"
const maxLineNum: int :: 400000
var answer: int { 答えとなる交差点の数 }
var temp: []int

func main()
	var startTime: int :: lib@sysTime()

	{ numsに各行の数値を代入します。}
	var nums: []int :: #[@maxLineNum]int
	var num: int :: 0
	var numsLen: int :: 0

	block
		var filePtr: file@Reader :: file@makeReader(@inputFilePath)
		if(filePtr =& null)
			do cui@print("[Error] ファイル読み込みエラー: " ~ @inputFilePath)
		end if
		while(!filePtr.term())
			if(numsLen = @maxLineNum)
				do cui@print("[Error] ファイルの行数が想定よりも大きいです: " ~ @inputFilePath)
			end if
			do nums[numsLen] :: filePtr.readInt()
			do numsLen :+ 1
		end while
	end block

	{ numsをソートするとすべての交差点がほどけます。マージソートをしながら、ほどけていく交差点の数を数えます。 }
	do @answer :: 0
	do @temp :: #[numsLen]int
	do @mergeSort(nums, 0, numsLen - 1)

	block
		var endTime: int :: lib@sysTime()
		var processTime: int :: (endTime - startTime) { 経過時間[ミリ秒] }
		var filePtr: file@Writer :: file@makeWriter(@outputFilePath, false)
		var outputStr: []char :: "" ~
		| "\{@answer},\{processTime / 1000}\n" ~
		| "ENV: Kuin\n" ~
		| "\n" ~
		| "実行時間: \{processTime}ミリ秒"
		do filePtr.writeStr(outputStr)
	end block
end func

func mergeSort(array: []int, left: int, right: int)
	{ ソート範囲の要素数が1つか2つの場合は、このifブロック内で処理を済ませます。 }
	if(right - left < 2)
		if(array[left] > array[right])
			do array[left] :$ array[right]
			do @answer :+ 1 { 交差点が1つほどけます }
		end if
		ret
	end if

	var mid: int :: (left + right) / 2
	do @mergeSort(array, left, mid)
	do @mergeSort(array, mid + 1, right)

	{ 左半分はそのままtempにコピーします。 }
	for i(left, mid)
		do @temp[i] :: array[i]
	end for
	{ 右半分は逆順でtempにコピーします。 }
	var j: int :: right
	for i(mid + 1, right)
		do @temp[i] :: array[j]
		do j :- 1
	end for

	var l: int :: left
	var r: int :: right
	for i(left, right)
		if(@temp[l] > @temp[r])
			do @answer :+ mid - l + 1 { @temp[r]が左半分の右から(mid - l + 1)個の数を跨いで、(mid - l + 1)個の交差点がほどけます。 }
			do array[i] :: @temp[r]
			do r :- 1
		else
			do array[i] :: @temp[l]
			do l :+ 1
		end if
	end for
end func
